buildscript {
    ext {
        springBootVersion = "1.4.2.RELEASE"
        springVersion = "4.3.4.RELEASE"
        springCloudVersion = "Camden.SR3"
        springCloudSsoVersion = "1.1.0.RELEASE"
        springSecurityVersion = "4.1.3.RELEASE"
        springCloudServicesVersion = "1.3.1.RELEASE"

        certTrusterVersion = "1.0.1.RELEASE"
        hibernateVersion = "5.0.11.Final"
        slf4jVersion = "1.7.21"
        junitVersion = "4.12"
        mysqlVersion = "5.1.40"

        isPws = false
        cfDomain = "cfapps-01.haas-66.pez.pivotal.io"
        cfMysqlSvc = "p-mysql"
    }

    repositories {
        mavenCentral()
    }

    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:$springBootVersion"
        classpath "io.spring.gradle:dependency-management-plugin:0.6.1.RELEASE"
    }
}

task dependenciesGraphDot {

    mustRunAfter "clean"

    def graphBuildDir = "build/dependenciesGraph"
    def dotFile = file "$graphBuildDir/graph.dot"

    doLast {
        delete graphBuildDir
        mkdir graphBuildDir

        dotFile << "digraph dependencies {\n"

        project.subprojects.forEach { Project subProject ->
            try {

                Configuration compileConfig = subProject.configurations["compile"]

                compileConfig
                    .dependencies
                    .grep { it.respondsTo("getDependencyProject") }
                    .forEach { dotFile << """  "$subProject.name" -> "$it.dependencyProject.name"\n""" }
            } catch (UnknownConfigurationException ignored) {
            }
        }
        dotFile << "}\n"
    }
}

task dependenciesGraph(dependsOn: "dependenciesGraphDot", type: Exec) {
    workingDir "$project.buildDir/dependenciesGraph"
    commandLine "dot", "-O", "-Tpng", "graph.dot"
}



task clean(type: Delete) {
    delete "build"
}

defaultTasks "clean", "build", "dependenciesGraph"

//task deploy {
//    doLast {
//        "cf push".execute().in.eachLine { line ->
//            println line
//        }
//    }
//}

task checkIsPws {
    println "Checking if running in PWS. Current/Default value is ${isPws}"
    def api = "cf target | grep 'API endpoint:'".execute().text
    isPws = api.contains("api.run.pivotal.io")
    if (isPws) {
        cfDomain = "cfapps.io"
        cfMysqlSvc = "cleardb"
    }
    println "Finished checking if running in PWS. Result is ${isPws}"
}

task setupPcfEnv(dependsOn: "checkIsPws") {
    def mysqlSvc = isPws ? 'cleardb' : 'p-msql'
    def mysqlPlan = isPws ? 'spark' : '100mb'

    doLast {
        def cmds = [
            "cf create-service ${mysqlSvc} ${mysqlPlan} movie-database",
            "cf create-service ${mysqlSvc} ${mysqlPlan} album-database",
            "cf create-service p-identity auth-domain movie-fun-sso",
            "cf create-service p-service-registry standard movie-fun-registry"
        ]
        if (isPws) {
            cmds.removeAll { it.toLowerCase().contains('p-identity') }
        }
        cmds.each { println it.execute().text }
    }
}

task teardownPcfEnv(dependsOn: "checkIsPws") {
    doLast {
        def cmds = [
            "cf delete -f album-service",
            "cf delete -f movie-service",
            "cf delete -f movie-fun-app",
            "cf delete-service -f movie-database",
            "cf delete-service -f album-database",
            "cf delete-service -f movie-fun-sso",
            "cf delete-service -f movie-fun-registry",
        ]
        if (isPws) {
            cmds.removeAll { it.toLowerCase().contains('sso') }
        }
        cmds.each { println it.execute().text }
    }
}
